#!/bin/sh /etc/rc.common
#
# Copyright (C) 2016 openwrt-ssr
# Copyright (C) 2016 yushi studio <ywb94@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

SERVICE_DAEMONIZE=1
NAME=shadowsocksr
EXTRA_COMMANDS=rules
CONFIG_FILE=/var/etc/$NAME.json
CONFIG_UDP_FILE=/var/etc/${NAME}_u.json
server_count=0
redir_tcp=0
redir_udp=0
tunnel_enable=0
kcp_enable_flag=0

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

gen_config_file() {
         local host=$(uci_get_by_name $1 server)
         if echo $host|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
         hostip=${host}
         else
          hostip=`ping ${host} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1`
          if echo $hostip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
          hostip=${hostip}
          else
          hostip=`cat /etc/ssr_ip`
          fi
         fi
         [ $2 = "0" -a  $kcp_enable_flag = "1" ] && hostip="127.0.0.1"
         
         if [ $2 = "0" ] ;then
         config_file=$CONFIG_FILE
         else
         config_file=$CONFIG_UDP_FILE
         fi
	cat <<-EOF >$config_file
		{
		    
		    "server": "$hostip",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "local_address": "0.0.0.0",
		    "local_port": $(uci_get_by_name $1 local_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)",
		    "protocol": "$(uci_get_by_name $1 protocol)",
		    "obfs": "$(uci_get_by_name $1 obfs)",
		    "obfs_param": "$(uci_get_by_name $1 obfs_param)"
		}
EOF
}



start_rules() {
	local server=$(uci_get_by_name $GLOBAL_SERVER server)
	#resolve name
	if echo $server|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
	server=${server}
	else
	server=`ping ${server} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1`
	 if echo $server|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
	  echo $server >/etc/ssr_ip
	 else
	  server=`cat /etc/ssr_ip`
	 fi
	fi
	
	#deal kcp
	local kcp_enable=$(uci_get_by_name $GLOBAL_SERVER kcp_enable)
	if [ $kcp_enable = "1" ] ;then
		[ ! -f "/usr/bin/kcptun/ssr-kcptun" ]  &&  return 1
		chmod 755 /usr/bin/kcptun/ssr-kcptun
		local kcp_str=`/usr/bin/kcptun/ssr-kcptun -v |grep kcptun|wc -l`
		[ "0" = $kcp_str ] && return 1
    local kcp_port=$(uci_get_by_name $GLOBAL_SERVER kcp_port)
    local server_port=$(uci_get_by_name $GLOBAL_SERVER server_port)
    local password=$(uci_get_by_name $GLOBAL_SERVER kcp_password)
    local kcp_param=$(uci_get_by_name $GLOBAL_SERVER kcp_param)
    [ "$password" != "" ] && password="--key "${password}
    service_start /usr/bin/kcptun/ssr-kcptun -r $server:$kcp_port -l :$server_port  $password $kcp_param 
    server="127.0.0.1"
    kcp_enable_flag=1
	fi
	
	local local_port=$(uci_get_by_name $GLOBAL_SERVER local_port)
	local lan_ac_ips=$(uci_get_by_type access_control lan_ac_ips)
	local lan_ac_mode=$(uci_get_by_type access_control lan_ac_mode)
	if [ "$GLOBAL_SERVER" = "$UDP_RELAY_SERVER" -a $kcp_enable_flag = 0 ]; then
		ARG_UDP="-u"
	elif [ -n "$UDP_RELAY_SERVER" ]; then
		ARG_UDP="-U"
		local udp_server=$(uci_get_by_name $UDP_RELAY_SERVER server)
		local udp_local_port=$(uci_get_by_name $UDP_RELAY_SERVER local_port)
	fi
	if [ -n "$lan_ac_ips" ]; then
		case "$lan_ac_mode" in
			w|W|b|B) local ac_ips="$lan_ac_mode$lan_ac_ips";;
		esac
	fi
	/usr/bin/ssr-rules \
		-s "$server" \
		-l "$local_port" \
		-S "$udp_server" \
		-L "$udp_local_port" \
		-a "$ac_ips" \
		-i "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		-e "$(uci_get_by_type access_control ipt_ext)" \
		-o $ARG_UDP
	return $?
}

start_redir() {
	case "$(uci_get_by_name $GLOBAL_SERVER auth_enable)" in
		1|on|true|yes|enabled) ARG_OTA="-A";;
		*) ARG_OTA="";;
	esac
	gen_config_file $GLOBAL_SERVER 0
	
	redir_tcp=1
	local last_config_file=$CONFIG_FILE
	local pid_file="/var/run/ssr-retcp.pid"
	
	if [ "$ARG_UDP" = "-U" ]; then
		/usr/bin/ssr-redir \
			-c $CONFIG_FILE $ARG_OTA \
			-f /var/run/ssr-retcp.pid
		
		case "$(uci_get_by_name $UDP_RELAY_SERVER auth_enable)" in
			1|on|true|yes|enabled) ARG_OTA="-A";;
			*) ARG_OTA="";;
		esac		
		gen_config_file $UDP_RELAY_SERVER 1
		last_config_file=$CONFIG_UDP_FILE
		pid_file="/var/run/ssr-reudp.pid"
		redir_udp=1
	fi
	
		/usr/bin/ssr-redir \
		-c $last_config_file $ARG_OTA $ARG_UDP \
		-f $pid_file

	return $?
}

gen_service_file() {
         
	cat <<-EOF >$2
		{
		    "server": "$(uci_get_by_name $1 server)",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)",
		    "protocol": "$(uci_get_by_name $1 protocol)",
		    "obfs": "$(uci_get_by_name $1 obfs)",
		    "obfs_param": "$(uci_get_by_name $1 obfs_param)"
		}
EOF
}


start_service() {
let server_count=server_count+1
gen_service_file $1 /var/etc/${NAME}_${server_count}.json
/usr/bin/ssr-server -c /var/etc/${NAME}_${server_count}.json -u -f /var/run/ssr-server${server_count}.pid 

return 0
}

start_server() {
  SERVER_ENABLE=$(uci_get_by_type server_global enable_server)
  [ "$SERVER_ENABLE" = 0 ] && return 0
	mkdir -p /var/run /var/etc
	config_load $NAME
	config_foreach start_service server_config
	
	return 0
}

start_tunnel() {
	/usr/bin/ssr-tunnel \
		-c $CONFIG_FILE $ARG_OTA ${ARG_UDP:="-u"} \
		-l $(uci_get_by_type udp_forward tunnel_port 5300) \
		-L $(uci_get_by_type udp_forward tunnel_forward 8.8.4.4:53) \
		-f /var/run/ssr-tunnel.pid
	tunnel_enable=1	
	return $?
}

rules() {
	GLOBAL_SERVER=$(uci_get_by_type global global_server)
	[ "$GLOBAL_SERVER" = "nil" ] && return 1
	mkdir -p /var/run /var/etc
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	[ "$UDP_RELAY_SERVER" = "same" ] && UDP_RELAY_SERVER=$GLOBAL_SERVER
	if start_rules ;then
	return 0
	else
	return 1
	fi
}

start() {
	if rules ;then
	start_redir
	case "$(uci_get_by_type udp_forward tunnel_enable)" in
		1|on|true|yes|enabled) start_tunnel;;
	esac
	fi
	start_server	
	if [ $(uci_get_by_type global monitor_enable) = 1 ] ;then
	let total_count=server_count+redir_tcp+redir_udp+tunnel_enable+kcp_enable_flag
	if [ $total_count -gt 0 ]
	then
	#param:server(count) redir_tcp(0:no,1:yes)  redir_udp(0:no,1:yes) tunnel(0:no,1:yes)
	service_start /usr/bin/ssr-monitor $server_count $redir_tcp $redir_udp $tunnel_enable $kcp_enable_flag
	fi
	fi
	
}

stop() {
	/usr/bin/ssr-rules -f
	killall -q -9 ssr-kcptun
	killall -q -9 ssr-monitor
	killall -q -9 ssr-redir
	killall -q -9 ssr-tunnel
	killall -q -9 ssr-server

}
